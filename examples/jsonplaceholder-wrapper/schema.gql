type Geo {
  lat: String!
  lng: String!
}

type Address {
  street: String!
  suite: String!
  city: String!
  zipcode: String!
  geo: Geo!
}

type Company {
  name: String!
  catchPhrase: String!
  bs: String!
}

type User {
  id: Int!
  name: String!
  username: String!
  email: String!
  address: Address!
  phone: String!
  website: String!
  company: Company!
  posts: [Post]!
  todos: [Todo]!
  albums: [Album]!
}

type Comment {
  post: Post!
  id: Int!
  name: String!
  email: String!
  body: String!
}

type Post {
  user: User!
  id: Int!
  title: String!
  body: String!
  comments: [Comment]!
}

type Photo {
  album: Album!
  id: Int!
  title: String!
  url: String!
  thumbnailUrl: String!
}

type Album {
  user: User!
  id: Int!
  title: String!
  photos: [Photo]!
}

type Todo {
  user: User!
  id: Int!
  title: String!
  completed: Boolean!
}

type Query {
  users(page: Int): [User]!
  user(id: Int!): User!

  post(id: Int!): Post!
  posts(page: Int): [Post]!

  comment(id: Int!): Comment!
  comments(page: Int): [Comment]!

  todo(id: Int!): Todo!
  todos(page: Int): Todo!

  album(id: Int!): Album!
  albums(page: Int): [Album]!

  photo(id: Int!): Photo!
  photos(page: Int): [Photo]!
}

input PublishPostInput {
  title: String!
  body: String!
  userId: Int!
}

type Mutation {
  publishPost(input: PublishPostInput): Post
}

schema {
  query: Query
}
